// 插入排序的代码如下：
// typescript
function insertionSort(arr: number[]): number[] {
    for (let i = 1; i < arr.length; i++) { // 从第二个元素开始遍历
        const key = arr[i]; // 当前元素
        let j = i - 1; // 前一个元素的索引
        while (j >= 0 && arr[j] > key) { // 如果前一个元素大于当前元素
            arr[j + 1] = arr[j]; // 将前一个元素移动到后一个位置
            j--; // 前一个元素的索引减1
        }
        arr[j + 1] = key; // 将当前元素插入到正确的位置
    }
    return arr; // 返回排序后的数组
}
// 插入排序的时间复杂度为 O(n^2)，空间复杂度为 O(1)，适合小规模数据的排序。
// 插入排序是稳定的排序算法，即相同元素的相对位置不会改变。
// 示例用法
const arr = [12, 11, 13, 5, 6]; // 待排序的数组
insertionSort(arr); // 调用插入排序函数
console.log(arr); // 输出: [5, 6, 11, 12, 13]



// 总结：
// 插入排序其实就是通过比较当前元素与前面已排序元素的大小关系，将当前元素插入到正确的位置。它的时间复杂度为 O(n^2)，适合小规模数据的排序。
// 插入排序是稳定的排序算法，即相同元素的相对位置不会改变。它的实现比较简单。